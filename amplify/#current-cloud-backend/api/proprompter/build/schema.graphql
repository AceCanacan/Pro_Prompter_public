type Mutation {
  saveSummary(input: SaveSummaryInput!): Summary!
  createSummary(input: CreateSummaryInput!, condition: ModelSummaryConditionInput): Summary
  updateSummary(input: UpdateSummaryInput!, condition: ModelSummaryConditionInput): Summary
  deleteSummary(input: DeleteSummaryInput!, condition: ModelSummaryConditionInput): Summary
}

input SaveSummaryInput {
  title: String!
  description: String!
  firstSummary: String!
  secondSummary: String!
}

type Summary {
  id: ID!
  title: String!
  description: String
  firstSummary: String
  secondSummary: String
  owner: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelSummaryConnection {
  items: [Summary]!
  nextToken: String
}

input ModelSummaryFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  firstSummary: ModelStringInput
  secondSummary: ModelStringInput
  owner: ModelStringInput
  and: [ModelSummaryFilterInput]
  or: [ModelSummaryFilterInput]
  not: ModelSummaryFilterInput
}

type Query {
  getSummary(id: ID!): Summary
  listSummaries(filter: ModelSummaryFilterInput, limit: Int, nextToken: String): ModelSummaryConnection
}

input ModelSummaryConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  firstSummary: ModelStringInput
  secondSummary: ModelStringInput
  owner: ModelStringInput
  and: [ModelSummaryConditionInput]
  or: [ModelSummaryConditionInput]
  not: ModelSummaryConditionInput
}

input CreateSummaryInput {
  id: ID
  title: String!
  description: String
  firstSummary: String
  secondSummary: String
  owner: String
}

input UpdateSummaryInput {
  id: ID!
  title: String
  description: String
  firstSummary: String
  secondSummary: String
  owner: String
}

input DeleteSummaryInput {
  id: ID!
}

input ModelSubscriptionSummaryFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  firstSummary: ModelSubscriptionStringInput
  secondSummary: ModelSubscriptionStringInput
  and: [ModelSubscriptionSummaryFilterInput]
  or: [ModelSubscriptionSummaryFilterInput]
}

type Subscription {
  onCreateSummary(filter: ModelSubscriptionSummaryFilterInput, owner: String): Summary @aws_subscribe(mutations: ["createSummary"])
  onUpdateSummary(filter: ModelSubscriptionSummaryFilterInput, owner: String): Summary @aws_subscribe(mutations: ["updateSummary"])
  onDeleteSummary(filter: ModelSubscriptionSummaryFilterInput, owner: String): Summary @aws_subscribe(mutations: ["deleteSummary"])
}
