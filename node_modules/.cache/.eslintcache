[{"/Users/acecanacan/Developer/ProPrompter-priv/src/index.js":"1","/Users/acecanacan/Developer/ProPrompter-priv/src/App.js":"2","/Users/acecanacan/Developer/ProPrompter-priv/src/reportWebVitals.js":"3","/Users/acecanacan/Developer/ProPrompter-priv/src/aws-exports.js":"4","/Users/acecanacan/Developer/ProPrompter-priv/src/pages/question.js":"5","/Users/acecanacan/Developer/ProPrompter-priv/src/pages/viewsummary.js":"6","/Users/acecanacan/Developer/ProPrompter-priv/src/pages/prompts.js":"7","/Users/acecanacan/Developer/ProPrompter-priv/src/pages/guide.js":"8","/Users/acecanacan/Developer/ProPrompter-priv/src/pages/summary.js":"9","/Users/acecanacan/Developer/ProPrompter-priv/src/pages/FollowUpPage.js":"10","/Users/acecanacan/Developer/ProPrompter-priv/src/pages/modal.js":"11","/Users/acecanacan/Developer/ProPrompter-priv/src/graphql/mutations.js":"12","/Users/acecanacan/Developer/ProPrompter-priv/src/graphql/queries.js":"13"},{"size":535,"mtime":1700121199865,"results":"14","hashOfConfig":"15"},{"size":2623,"mtime":1700121199865,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1700121199866,"results":"17","hashOfConfig":"15"},{"size":1371,"mtime":1700182974207,"results":"18","hashOfConfig":"15"},{"size":6083,"mtime":1700121199866,"results":"19","hashOfConfig":"15"},{"size":2933,"mtime":1700121199866,"results":"20","hashOfConfig":"15"},{"size":1818,"mtime":1700121199866,"results":"21","hashOfConfig":"15"},{"size":3577,"mtime":1700121199866,"results":"22","hashOfConfig":"15"},{"size":4225,"mtime":1700121199866,"results":"23","hashOfConfig":"15"},{"size":6143,"mtime":1700121199866,"results":"24","hashOfConfig":"15"},{"size":751,"mtime":1700121199866,"results":"25","hashOfConfig":"15"},{"size":1400,"mtime":1700121199865,"results":"26","hashOfConfig":"15"},{"size":1035,"mtime":1700121199865,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qjmbx8",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/acecanacan/Developer/ProPrompter-priv/src/index.js",[],[],"/Users/acecanacan/Developer/ProPrompter-priv/src/App.js",[],[],"/Users/acecanacan/Developer/ProPrompter-priv/src/reportWebVitals.js",[],[],"/Users/acecanacan/Developer/ProPrompter-priv/src/aws-exports.js",[],[],"/Users/acecanacan/Developer/ProPrompter-priv/src/pages/question.js",["70","71"],[],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\n\nimport '../pages-css/followup-style.css';\n\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = \"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\";\n\nfunction QuestionPage() {\n\n  const [userInput, setUserInput] = useState('');\n  const [botMessage, setBotMessage] = useState('How do you want the chatbot to behave?');\n  const [loading, setLoading] = useState(false);\n  const [questionCount, setQuestionCount] = useState(1);\n  const [allMessages, setAllMessages] = useState([]);\n\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const [error,setError] = useState([]);\n  const [summary,setSummary] = useState([]);\n  \n\n  const navigate = useNavigate();\n\nconst processAndSummarize = async () => {\n    if (!API_KEY) {\n      setError('API key is missing. Please provide a valid API key.');\n      return;\n    }\n    \n    setLoading(true);\n    setError('');\n  \n    // Filter out only user messages\n    const userMessages = allMessages.filter(message => message.role === 'user');\n  \n    const systemMessage = {\n      role: 'system',\n      content: `Create a prompt that directs a chatbot's behavior based on user messages. \n                The prompt should interpret the intent and content of the messages and convert them into commands \n                that sounds like \"You are a chatbot that \". \n                The command should clearly instruct the chatbot on how to \n                incorporate the essence of the messages into its operational framework.`\n    };\n  \n    const conversationMessages = [systemMessage, ...userMessages]; \n  \n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: conversationMessages,\n        max_tokens: 150,\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      const lastBotMessage = response.data.choices[0].message.content.trim();\n      setSummary(lastBotMessage);\n      console.log(lastBotMessage); // Updated to log lastBotMessage instead of summary to reflect the newly obtained summary\n      return lastBotMessage; \n    } catch (error) {\n      console.error(\"Error response from OpenAI:\", error.response?.data);\n      setError('Failed to process and summarize messages. Please try again.');\n    }\n  \n    setLoading(false);\n  };  \n\n  const handleDoneQuestionPage = async () => {\n    const isConfirmed = window.confirm(\"Are you sure you want to proceed to the information page?\");\n\n    if (isConfirmed) {\n      setIsProcessing(true); // Set processing state for navigation\n      try {\n        const summaryResult = await processAndSummarize(); \n        setIsProcessing(false); // Reset processing state after completion\n        if (summaryResult) { \n          navigate('/follow-up', { state: { messages: allMessages, firstSummary: summaryResult } });\n        } else {\n        }\n      } catch (error) {\n        console.error(\"Failed to process:\", error);\n        setIsProcessing(false); // Reset processing state in case of error\n      }\n    } else {\n    }\n  };\n\n\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n\n    const primeMessage = {\n      role: 'system', \n      content: `You are a chatbot designed to develop prompts. \n                Your goal is to gather information that will be recorded and be given to another chatbot. \n                It is imperative that you just provide a question. Do not exhibit any behavior just ask questions.\n                Your task: create a prompt guiding a chatbot's specific behavior.\n                Your role: ask clear questions to gather details, not to offer suggestions.\n                Focus on precision. Ask one question at a time to create an accurate new prompt.\n                The first question is \"How do you want the chatbot to behave?\"\n      `\n    };\n    \n    const userMessage = { role: 'user', content: userInput };\n\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: [primeMessage, userMessage],\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      setBotMessage(response.data.choices[0].message.content.trim());\n      setQuestionCount(prevCount => prevCount + 1);\n      setAllMessages(prevMessages => [...prevMessages, userMessage]);\n    } catch (error) {\n      console.error(\"Error response from OpenAI:\", error.response?.data);\n    }\n\n    setUserInput('');\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"body\">\n      <div className=\"main-container-chatpage\">\n        {isProcessing ? (\n          <div className=\"loading-screen\">Processing...</div>\n        ) : (\n          <>\n            <div className=\"bot-message\">\n              <span>{botMessage}</span>\n            </div>\n  \n            <div className=\"input-container-chat\">\n              <input\n                type=\"text\"\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n                placeholder=\"Type a message...\"\n                disabled={loading || questionCount > 10}\n                className=\"user-input\"\n              />\n              {questionCount <= 10 && (\n                <button \n                  onClick={sendMessage} \n                  disabled={loading || !userInput.trim()}\n                  className=\"send-button\"\n                >\n                  Send\n                </button>\n              )}\n              {questionCount >= 1 && (\n                <button\n                  onClick={handleDoneQuestionPage}\n                  disabled={loading || allMessages.length === 0}\n                  className=\"done-button\"\n                >\n                  Next\n                </button>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n  \n  \n}\n\nexport default QuestionPage;","/Users/acecanacan/Developer/ProPrompter-priv/src/pages/viewsummary.js",[],[],"/Users/acecanacan/Developer/ProPrompter-priv/src/pages/prompts.js",["72","73"],[],"import React, { useState, useEffect } from 'react';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport { listSummaries } from '../graphql/queries';\nimport { useNavigate } from 'react-router-dom';\n\n\nimport '../pages-css/prompts-style.css';\n\nfunction PromptsPage() {\n  const [summaries, setSummaries] = useState([]);\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n\n  const viewSummary = (summary) => {\n    navigate('/summary-view', { state: summary });\n  };\n\n  useEffect(() => {\n    const fetchSummaries = async () => {\n      try {\n        const userData = await Auth.currentAuthenticatedUser();\n        setUser(userData);\n        const summaryData = await API.graphql(graphqlOperation(listSummaries));\n        if (summaryData.data.listSummaries) {\n          setSummaries(summaryData.data.listSummaries.items);\n        }\n      } catch (err) {\n        console.error('Error fetching summaries', err);\n      }\n    };\n\n    fetchSummaries();\n  }, []);\n\n  const handleLogout = async () => {\n    try {\n      await Auth.signOut();\n      setUser(null);\n      setSummaries([]);\n    } catch (error) {\n      console.error('Error during sign out:', error);\n    }\n  };\n\n  return (\n    <div className=\"PromptsPage-container\">  \n      {summaries.length ? (\n        <ul className=\"PromptsPage-summaryList\">\n          {summaries.map((summary, index) => (\n            <li className=\"PromptsPage-summaryItem\" key={summary.id || index} onClick={() => viewSummary(summary)}>\n              <h3 className=\"PromptsPage-summaryTitle\">{summary.title}</h3>\n              <p className=\"PromptsPage-summaryDescription\">Description: {summary.description}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No summaries saved.</p>\n      )}\n    </div>\n  );\n}\n\nexport default PromptsPage;","/Users/acecanacan/Developer/ProPrompter-priv/src/pages/guide.js",[],[],"/Users/acecanacan/Developer/ProPrompter-priv/src/pages/summary.js",[],[],"/Users/acecanacan/Developer/ProPrompter-priv/src/pages/FollowUpPage.js",["74"],[],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport '../pages-css/followup-style.css';\n\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = \"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\";\n\nfunction FollowUpPage() {\n  const [userInput, setUserInput] = useState('');\n\n  const [botMessage, setBotMessage] = useState('What information do you want to include?');\n  const [loading, setLoading] = useState(false);\n  const [questionCount, setQuestionCount] = useState(1);\n  const [allMessages, setAllMessages] = useState([]);\n  const [summary, setSummary] = useState('');\n  const [error, setError] = useState('');\n\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const navigate = useNavigate();\n  const { state } = useLocation();\n\n  useEffect(() => {\n    if (state?.firstSummary) { // Ensure you're checking for the correct state property\n      setSummary(state.firstSummary); // Set the summary state\n      setAllMessages(state.messages); // Set the messages state\n    } else {\n      console.error(\"No summary or messages in the state\");\n    }\n  }, [state]);\n\n  const processAndSummarize = async () => {\n\n    if (!API_KEY) {\n      setError('API key is missing. Please provide a valid API key.');\n      return;\n    }\n\n    setIsGenerating(true); // Start generating prompts\n    setError('')\n\n    setLoading(true);\n    setError('');\n\n    const systemMessage = {\n      role: 'system',\n      content: `\n               Your goal is to make an objective summary of this. \n               It is imperative that you just provide a summary. Do not exhibit any behavior just make a summary.\n               Your task: summarize this information into a few paragraphs.\n               Your role: produce the summary objectively without compromising the detailed information.\n               Focus on objectivity and make the summary.`\n  };\n  \n    const userMessages = allMessages.filter(message => message.role === 'user');\n  \n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: [systemMessage, ...userMessages],\n        max_tokens: 150,\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      const lastBotMessage = response.data.choices[0].message.content.trim();\n      setSummary(lastBotMessage);\n      return lastBotMessage; \n    } catch (error) {\n      console.error(\"Error response from OpenAI:\", error.response?.data);\n      setError('Failed to process and summarize messages. Please try again.');\n      return null;\n    }\n\n    setIsGenerating(false);\n\n  };\n\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n\n    const primeMessage = {\n      role: 'system', \n      content: ` This is a prompt that will be given to a chatbot [${summary}]\n                Your goal is to gather information that will complement that behavior . \n                It is imperative that you just provide a question. Do not exhibit any behavior just ask questions.\n                Your task: gather information from the user that will be relevant to the prompt.\n                Your role: ask clear questions to gather details, not to offer suggestions.\n                Focus on precision. Ask one question at a time to create an accurate new prompt`\n    };\n    \n    const userMessage = { role: 'user', content: userInput };\n\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: [primeMessage, userMessage],\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      setBotMessage(response.data.choices[0].message.content.trim());\n      setQuestionCount(prevCount => prevCount + 1);\n      setAllMessages(prevMessages => [...prevMessages, userMessage]);\n    } catch (error) {\n      console.error(\"Error response from OpenAI:\", error.response?.data);\n    }\n\n    setUserInput('');\n    setLoading(false);\n  };\n\n\n\n  const handleDoneFollowUpPage = async () => {\n    const confirmFinish = window.confirm(\"Are you sure you want to finish and generate the prompts?\");\n    if (confirmFinish) {\n      await processAndSummarize()\n        .then((newSummary) => {\n          if (!error) {\n            navigate('/summary', {\n              state: {\n                firstSummary: state.firstSummary,\n                secondSummary: newSummary\n              }\n            });\n          }\n        })\n        .catch((error) => {\n          console.error(\"Failed to summarize:\", error);\n        });\n    } else {\n    }\n  };\n  \n\n\n  return (\n    <div className='body'>\n      <div className=\"main-container-chatpage\">\n        {isGenerating ? (\n          <div className=\"loading-screen\">Generating Prompts...</div>\n        ) : (\n          <>\n            <div className=\"bot-message\">\n              <span>{botMessage}</span>\n            </div>\n  \n            <div className=\"input-container-chat\">\n              <input\n                type=\"text\"\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n                placeholder=\"Type a message...\"\n                disabled={loading || questionCount > 10}\n                className=\"user-input\"\n              />\n              {questionCount <= 10 && (\n                <button \n                  onClick={sendMessage} \n                  disabled={loading || !userInput.trim()}\n                  className=\"send-button\"\n                >\n                  Send\n                </button>\n              )}\n              {questionCount >= 1 && (\n                <button\n                  onClick={handleDoneFollowUpPage}\n                  className=\"done-button\"\n                  disabled={loading || allMessages.length === 0}\n                >\n                  Done\n                </button>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n  \n}\n\nexport default FollowUpPage;","/Users/acecanacan/Developer/ProPrompter-priv/src/pages/modal.js",[],[],"/Users/acecanacan/Developer/ProPrompter-priv/src/graphql/mutations.js",[],[],"/Users/acecanacan/Developer/ProPrompter-priv/src/graphql/queries.js",[],[],{"ruleId":"75","severity":1,"message":"76","line":21,"column":10,"nodeType":"77","messageId":"78","endLine":21,"endColumn":15},{"ruleId":"75","severity":1,"message":"79","line":22,"column":10,"nodeType":"77","messageId":"78","endLine":22,"endColumn":17},{"ruleId":"75","severity":1,"message":"80","line":11,"column":10,"nodeType":"77","messageId":"78","endLine":11,"endColumn":14},{"ruleId":"75","severity":1,"message":"81","line":35,"column":9,"nodeType":"77","messageId":"78","endLine":35,"endColumn":21},{"ruleId":"82","severity":1,"message":"83","line":80,"column":5,"nodeType":"84","messageId":"85","endLine":80,"endColumn":28},"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'summary' is assigned a value but never used.","'user' is assigned a value but never used.","'handleLogout' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode"]