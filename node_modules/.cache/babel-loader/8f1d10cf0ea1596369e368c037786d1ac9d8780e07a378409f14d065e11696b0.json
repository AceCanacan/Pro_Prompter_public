{"ast":null,"code":"var _jsxFileName = \"/Users/acecanacan/Developer/ProPrompter-priv/src/pages/FollowUpPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport '../pages-css/followup-style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = \"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\";\nfunction FollowUpPage() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [botMessage, setBotMessage] = useState('What information do you want to include?');\n  const [loading, setLoading] = useState(false);\n  const [questionCount, setQuestionCount] = useState(1);\n  const [allMessages, setAllMessages] = useState([]);\n  const [summary, setSummary] = useState('');\n  const [error, setError] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const navigate = useNavigate();\n  const {\n    state\n  } = useLocation();\n  useEffect(() => {\n    if (state !== null && state !== void 0 && state.firstSummary) {\n      // Ensure you're checking for the correct state property\n      setSummary(state.firstSummary); // Set the summary state\n      setAllMessages(state.messages); // Set the messages state\n    } else {\n      console.error(\"No summary or messages in the state\");\n    }\n  }, [state]);\n  const processAndSummarize = async () => {\n    if (!API_KEY) {\n      setError('API key is missing. Please provide a valid API key.');\n      return;\n    }\n    setIsGenerating(true); // Start generating prompts\n    setError('');\n    setLoading(true);\n    setError('');\n    const systemMessage = {\n      role: 'system',\n      content: `\n               Your goal is to make an objective summary of this. \n               It is imperative that you just provide a summary. Do not exhibit any behavior just make a summary.\n               Your task: summarize this information into a few paragraphs.\n               Your role: produce the summary objectively without compromising the detailed information.\n               Focus on objectivity and make the summary.`\n    };\n    const userMessages = allMessages.filter(message => message.role === 'user');\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: [systemMessage, ...userMessages],\n        max_tokens: 150\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const lastBotMessage = response.data.choices[0].message.content.trim();\n      setSummary(lastBotMessage);\n      return lastBotMessage;\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error response from OpenAI:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      setError('Failed to process and summarize messages. Please try again.');\n      return null;\n    }\n    setIsGenerating(false);\n  };\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n    const primeMessage = {\n      role: 'system',\n      content: ` This is a prompt that will be given to a chatbot [${summary}]\n                Your goal is to gather information that will complement that behavior . \n                It is imperative that you just provide a question. Do not exhibit any behavior just ask questions.\n                Your task: gather information from the user that will be relevant to the prompt.\n                Your role: ask clear questions to gather details, not to offer suggestions.\n                Focus on precision. Ask one question at a time to create an accurate new prompt`\n    };\n    const userMessage = {\n      role: 'user',\n      content: userInput\n    };\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: [primeMessage, userMessage]\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      setBotMessage(response.data.choices[0].message.content.trim());\n      setQuestionCount(prevCount => prevCount + 1);\n      setAllMessages(prevMessages => [...prevMessages, userMessage]);\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Error response from OpenAI:\", (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n    }\n    setUserInput('');\n    setLoading(false);\n  };\n  const handleDoneFollowUpPage = async () => {\n    const confirmFinish = window.confirm(\"Are you sure you want to finish and generate the prompts?\");\n    if (confirmFinish) {\n      await processAndSummarize().then(newSummary => {\n        if (!error) {\n          navigate('/summary', {\n            state: {\n              firstSummary: state.firstSummary,\n              secondSummary: newSummary\n            }\n          });\n        }\n      }).catch(error => {\n        console.error(\"Failed to summarize:\", error);\n      });\n    } else {}\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container-chatpage\",\n      children: isGenerating ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-screen\",\n        children: \"Generating Prompts...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-message\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: botMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container-chat\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: userInput,\n            onChange: e => setUserInput(e.target.value),\n            placeholder: \"Type a message...\",\n            disabled: loading || questionCount > 10,\n            className: \"user-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this), questionCount <= 10 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: sendMessage,\n            disabled: loading || !userInput.trim(),\n            className: \"send-button\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this), questionCount >= 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDoneFollowUpPage,\n            className: \"done-button\",\n            disabled: loading || allMessages.length === 0,\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n_s(FollowUpPage, \"FJKwLUIih7ahXiT4y43RMGQ77Qs=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = FollowUpPage;\nexport default FollowUpPage;\nvar _c;\n$RefreshReg$(_c, \"FollowUpPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","API_KEY","FollowUpPage","_s","userInput","setUserInput","botMessage","setBotMessage","loading","setLoading","questionCount","setQuestionCount","allMessages","setAllMessages","summary","setSummary","error","setError","isGenerating","setIsGenerating","navigate","state","firstSummary","messages","console","processAndSummarize","systemMessage","role","content","userMessages","filter","message","response","post","model","max_tokens","headers","lastBotMessage","data","choices","trim","_error$response","sendMessage","primeMessage","userMessage","prevCount","prevMessages","_error$response2","handleDoneFollowUpPage","confirmFinish","window","confirm","then","newSummary","secondSummary","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","disabled","onClick","length","_c","$RefreshReg$"],"sources":["/Users/acecanacan/Developer/ProPrompter-priv/src/pages/FollowUpPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport '../pages-css/followup-style.css';\n\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = \"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\";\n\nfunction FollowUpPage() {\n  const [userInput, setUserInput] = useState('');\n\n  const [botMessage, setBotMessage] = useState('What information do you want to include?');\n  const [loading, setLoading] = useState(false);\n  const [questionCount, setQuestionCount] = useState(1);\n  const [allMessages, setAllMessages] = useState([]);\n  const [summary, setSummary] = useState('');\n  const [error, setError] = useState('');\n\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const navigate = useNavigate();\n  const { state } = useLocation();\n\n  useEffect(() => {\n    if (state?.firstSummary) { // Ensure you're checking for the correct state property\n      setSummary(state.firstSummary); // Set the summary state\n      setAllMessages(state.messages); // Set the messages state\n    } else {\n      console.error(\"No summary or messages in the state\");\n    }\n  }, [state]);\n\n  const processAndSummarize = async () => {\n\n    if (!API_KEY) {\n      setError('API key is missing. Please provide a valid API key.');\n      return;\n    }\n\n    setIsGenerating(true); // Start generating prompts\n    setError('')\n\n    setLoading(true);\n    setError('');\n\n    const systemMessage = {\n      role: 'system',\n      content: `\n               Your goal is to make an objective summary of this. \n               It is imperative that you just provide a summary. Do not exhibit any behavior just make a summary.\n               Your task: summarize this information into a few paragraphs.\n               Your role: produce the summary objectively without compromising the detailed information.\n               Focus on objectivity and make the summary.`\n  };\n  \n    const userMessages = allMessages.filter(message => message.role === 'user');\n  \n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: [systemMessage, ...userMessages],\n        max_tokens: 150,\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      const lastBotMessage = response.data.choices[0].message.content.trim();\n      setSummary(lastBotMessage);\n      return lastBotMessage; \n    } catch (error) {\n      console.error(\"Error response from OpenAI:\", error.response?.data);\n      setError('Failed to process and summarize messages. Please try again.');\n      return null;\n    }\n\n    setIsGenerating(false);\n\n  };\n\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n\n    const primeMessage = {\n      role: 'system', \n      content: ` This is a prompt that will be given to a chatbot [${summary}]\n                Your goal is to gather information that will complement that behavior . \n                It is imperative that you just provide a question. Do not exhibit any behavior just ask questions.\n                Your task: gather information from the user that will be relevant to the prompt.\n                Your role: ask clear questions to gather details, not to offer suggestions.\n                Focus on precision. Ask one question at a time to create an accurate new prompt`\n    };\n    \n    const userMessage = { role: 'user', content: userInput };\n\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: [primeMessage, userMessage],\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      setBotMessage(response.data.choices[0].message.content.trim());\n      setQuestionCount(prevCount => prevCount + 1);\n      setAllMessages(prevMessages => [...prevMessages, userMessage]);\n    } catch (error) {\n      console.error(\"Error response from OpenAI:\", error.response?.data);\n    }\n\n    setUserInput('');\n    setLoading(false);\n  };\n\n\n\n  const handleDoneFollowUpPage = async () => {\n    const confirmFinish = window.confirm(\"Are you sure you want to finish and generate the prompts?\");\n    if (confirmFinish) {\n      await processAndSummarize()\n        .then((newSummary) => {\n          if (!error) {\n            navigate('/summary', {\n              state: {\n                firstSummary: state.firstSummary,\n                secondSummary: newSummary\n              }\n            });\n          }\n        })\n        .catch((error) => {\n          console.error(\"Failed to summarize:\", error);\n        });\n    } else {\n    }\n  };\n  \n\n\n  return (\n    <div className='body'>\n      <div className=\"main-container-chatpage\">\n        {isGenerating ? (\n          <div className=\"loading-screen\">Generating Prompts...</div>\n        ) : (\n          <>\n            <div className=\"bot-message\">\n              <span>{botMessage}</span>\n            </div>\n  \n            <div className=\"input-container-chat\">\n              <input\n                type=\"text\"\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n                placeholder=\"Type a message...\"\n                disabled={loading || questionCount > 10}\n                className=\"user-input\"\n              />\n              {questionCount <= 10 && (\n                <button \n                  onClick={sendMessage} \n                  disabled={loading || !userInput.trim()}\n                  className=\"send-button\"\n                >\n                  Send\n                </button>\n              )}\n              {questionCount >= 1 && (\n                <button\n                  onClick={handleDoneFollowUpPage}\n                  className=\"done-button\"\n                  disabled={loading || allMessages.length === 0}\n                >\n                  Done\n                </button>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n  \n}\n\nexport default FollowUpPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}