{"ast":null,"code":"var _jsxFileName = \"/Users/acecanacan/Developer/ProPrompter-priv/src/pages/question.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '../pages-css/followup-style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = \"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\";\nfunction QuestionPage() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [botMessage, setBotMessage] = useState('How do you want the chatbot to behave?');\n  const [loading, setLoading] = useState(false);\n  const [questionCount, setQuestionCount] = useState(1);\n  const [allMessages, setAllMessages] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState([]);\n  const [summary, setSummary] = useState([]);\n  const navigate = useNavigate();\n  const processAndSummarize = async () => {\n    if (!API_KEY) {\n      setError('API key is missing. Please provide a valid API key.');\n      return;\n    }\n    setLoading(true);\n    setError('');\n\n    // Filter out only user messages\n    const userMessages = allMessages.filter(message => message.role === 'user');\n    const systemMessage = {\n      role: 'system',\n      content: `Create a prompt that directs a chatbot's behavior based on user messages. \n                The prompt should interpret the intent and content of the messages and convert them into commands \n                that sounds like \"You are a chatbot that \". \n                The command should clearly instruct the chatbot on how to \n                incorporate the essence of the messages into its operational framework.`\n    };\n    const conversationMessages = [systemMessage, ...userMessages];\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: conversationMessages,\n        max_tokens: 150\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const lastBotMessage = response.data.choices[0].message.content.trim();\n      setSummary(lastBotMessage);\n      console.log(lastBotMessage); // Updated to log lastBotMessage instead of summary to reflect the newly obtained summary\n      return lastBotMessage;\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error response from OpenAI:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      setError('Failed to process and summarize messages. Please try again.');\n    }\n    setLoading(false);\n  };\n  const handleDoneQuestionPage = async () => {\n    const isConfirmed = window.confirm(\"Are you sure you want to proceed to the information page?\");\n    if (isConfirmed) {\n      setIsProcessing(true); // Set processing state for navigation\n      try {\n        const summaryResult = await processAndSummarize();\n        setIsProcessing(false); // Reset processing state after completion\n        if (summaryResult) {\n          navigate('/follow-up', {\n            state: {\n              messages: allMessages,\n              firstSummary: summaryResult\n            }\n          });\n        } else {}\n      } catch (error) {\n        console.error(\"Failed to process:\", error);\n        setIsProcessing(false); // Reset processing state in case of error\n      }\n    } else {}\n  };\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n    const primeMessage = {\n      role: 'system',\n      content: `You are a chatbot designed to develop prompts. \n                Your goal is to gather information that will be recorded and be given to another chatbot. \n                It is imperative that you just provide a question. Do not exhibit any behavior just ask questions.\n                Your task: create a prompt guiding a chatbot's specific behavior.\n                Your role: ask clear questions to gather details, not to offer suggestions.\n                Focus on precision. Ask one question at a time to create an accurate new prompt.\n                The first question is \"How do you want the chatbot to behave?\"\n      `\n    };\n    const userMessage = {\n      role: 'user',\n      content: userInput\n    };\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: [primeMessage, userMessage]\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      setBotMessage(response.data.choices[0].message.content.trim());\n      setQuestionCount(prevCount => prevCount + 1);\n      setAllMessages(prevMessages => [...prevMessages, userMessage]);\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Error response from OpenAI:\", (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n    }\n    setUserInput('');\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container-chatpage\",\n      children: isProcessing ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-screen\",\n        children: \"Processing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-message\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: botMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container-chat\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: userInput,\n            onChange: e => setUserInput(e.target.value),\n            placeholder: \"Type a message...\",\n            disabled: loading || questionCount > 10,\n            className: \"user-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), questionCount <= 10 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: sendMessage,\n            disabled: loading || !userInput.trim(),\n            className: \"send-button\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this), questionCount >= 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDoneQuestionPage,\n            disabled: loading || allMessages.length === 0,\n            className: \"done-button\",\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionPage, \"A7FlOlfz6y/JKRssIeB/0UmqFOY=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionPage;\nexport default QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","useState","axios","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","API_KEY","QuestionPage","_s","userInput","setUserInput","botMessage","setBotMessage","loading","setLoading","questionCount","setQuestionCount","allMessages","setAllMessages","isProcessing","setIsProcessing","error","setError","summary","setSummary","navigate","processAndSummarize","userMessages","filter","message","role","systemMessage","content","conversationMessages","response","post","model","messages","max_tokens","headers","lastBotMessage","data","choices","trim","console","log","_error$response","handleDoneQuestionPage","isConfirmed","window","confirm","summaryResult","state","firstSummary","sendMessage","primeMessage","userMessage","prevCount","prevMessages","_error$response2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","disabled","onClick","length","_c","$RefreshReg$"],"sources":["/Users/acecanacan/Developer/ProPrompter-priv/src/pages/question.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\n\nimport '../pages-css/followup-style.css';\n\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = \"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\";\n\nfunction QuestionPage() {\n\n  const [userInput, setUserInput] = useState('');\n  const [botMessage, setBotMessage] = useState('How do you want the chatbot to behave?');\n  const [loading, setLoading] = useState(false);\n  const [questionCount, setQuestionCount] = useState(1);\n  const [allMessages, setAllMessages] = useState([]);\n\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const [error,setError] = useState([]);\n  const [summary,setSummary] = useState([]);\n  \n\n  const navigate = useNavigate();\n\nconst processAndSummarize = async () => {\n    if (!API_KEY) {\n      setError('API key is missing. Please provide a valid API key.');\n      return;\n    }\n    \n    setLoading(true);\n    setError('');\n  \n    // Filter out only user messages\n    const userMessages = allMessages.filter(message => message.role === 'user');\n  \n    const systemMessage = {\n      role: 'system',\n      content: `Create a prompt that directs a chatbot's behavior based on user messages. \n                The prompt should interpret the intent and content of the messages and convert them into commands \n                that sounds like \"You are a chatbot that \". \n                The command should clearly instruct the chatbot on how to \n                incorporate the essence of the messages into its operational framework.`\n    };\n  \n    const conversationMessages = [systemMessage, ...userMessages]; \n  \n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: conversationMessages,\n        max_tokens: 150,\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      const lastBotMessage = response.data.choices[0].message.content.trim();\n      setSummary(lastBotMessage);\n      console.log(lastBotMessage); // Updated to log lastBotMessage instead of summary to reflect the newly obtained summary\n      return lastBotMessage; \n    } catch (error) {\n      console.error(\"Error response from OpenAI:\", error.response?.data);\n      setError('Failed to process and summarize messages. Please try again.');\n    }\n  \n    setLoading(false);\n  };  \n\n  const handleDoneQuestionPage = async () => {\n    const isConfirmed = window.confirm(\"Are you sure you want to proceed to the information page?\");\n\n    if (isConfirmed) {\n      setIsProcessing(true); // Set processing state for navigation\n      try {\n        const summaryResult = await processAndSummarize(); \n        setIsProcessing(false); // Reset processing state after completion\n        if (summaryResult) { \n          navigate('/follow-up', { state: { messages: allMessages, firstSummary: summaryResult } });\n        } else {\n        }\n      } catch (error) {\n        console.error(\"Failed to process:\", error);\n        setIsProcessing(false); // Reset processing state in case of error\n      }\n    } else {\n    }\n  };\n\n\n  const sendMessage = async () => {\n    if (!userInput.trim()) return;\n    setLoading(true);\n\n    const primeMessage = {\n      role: 'system', \n      content: `You are a chatbot designed to develop prompts. \n                Your goal is to gather information that will be recorded and be given to another chatbot. \n                It is imperative that you just provide a question. Do not exhibit any behavior just ask questions.\n                Your task: create a prompt guiding a chatbot's specific behavior.\n                Your role: ask clear questions to gather details, not to offer suggestions.\n                Focus on precision. Ask one question at a time to create an accurate new prompt.\n                The first question is \"How do you want the chatbot to behave?\"\n      `\n    };\n    \n    const userMessage = { role: 'user', content: userInput };\n\n    try {\n      const response = await axios.post(API_URL, {\n        model: 'gpt-4-1106-preview',\n        messages: [primeMessage, userMessage],\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      setBotMessage(response.data.choices[0].message.content.trim());\n      setQuestionCount(prevCount => prevCount + 1);\n      setAllMessages(prevMessages => [...prevMessages, userMessage]);\n    } catch (error) {\n      console.error(\"Error response from OpenAI:\", error.response?.data);\n    }\n\n    setUserInput('');\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"body\">\n      <div className=\"main-container-chatpage\">\n        {isProcessing ? (\n          <div className=\"loading-screen\">Processing...</div>\n        ) : (\n          <>\n            <div className=\"bot-message\">\n              <span>{botMessage}</span>\n            </div>\n  \n            <div className=\"input-container-chat\">\n              <input\n                type=\"text\"\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n                placeholder=\"Type a message...\"\n                disabled={loading || questionCount > 10}\n                className=\"user-input\"\n              />\n              {questionCount <= 10 && (\n                <button \n                  onClick={sendMessage} \n                  disabled={loading || !userInput.trim()}\n                  className=\"send-button\"\n                >\n                  Send\n                </button>\n              )}\n              {questionCount >= 1 && (\n                <button\n                  onClick={handleDoneQuestionPage}\n                  disabled={loading || allMessages.length === 0}\n                  className=\"done-button\"\n                >\n                  Next\n                </button>\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n  \n  \n}\n\nexport default QuestionPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}